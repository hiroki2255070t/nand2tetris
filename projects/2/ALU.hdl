// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // if (zx == 1) sets x = 0 
    Mux16(a=x, b[0..15]=false, sel=zx, out=x1); 
    // if (nx == 1) sets x = !x
    Not16(in=x1, out=notX);
    Mux16(a=x1, b=notX, sel=nx, out=x2);

    // if (zy == 1) sets y = 0 
    Mux16(a=y, b[0..15]=false, sel=zy, out=y1); 
    // if (ny == 1) sets y = !y
    Not16(in=y1, out=notY);
    Mux16(a=y1, b=notY, sel=ny, out=y2);

    // if (f == 0)  sets out = x & y
    // if (f == 1)  sets out = x + y
    And16(a=x2, b=y2, out=andXY);
    Add16(a=x2, b=y2, out=addXY);
    Mux16(a=andXY, b=addXY, sel=f, out=z);

    // if (no == 1) sets out = !out
    Not16(in=z, out=notZ);
    Mux16(a=z, b=notZ, sel=no, out[0..7]=w1, out[8..15]=w2, out[15]=ng, out=out);

    // if (out == 0) zr = 1, else zr = 0
    Or8Way(in=w1, out=w3);
    Or8Way(in=w2, out=w4);
    Or(a=w3, b=w4, out=w5);
    Not(in=w5, out=zr);
}